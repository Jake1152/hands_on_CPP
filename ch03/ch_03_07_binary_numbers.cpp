// ch_03_07_binary_numbers.cpp

#include <iostream>
using namespace <iostream>


/*
1
2
3
4
5
6
7
8
9
10 = 10^1 + 0
11 = 10^1 + 1
12 = 10^1 + 2 
...
337 = 300 + 30 + 7
*/
// 비트연산 비트 연산자.

/*
binary
0 1

10 = (2^1)*1 + (2^0)*0 = 2
11 = (2^1)*1 + (2^0)*1 = 3
...
 11 
+ 1
----
100
십진수와 같은룰 
자릿수 늘어나는 부분이 다르다.

0101 1110 십진수로 변환
94

148 (decimal to binary)
148 / 2 = 74 r0 (r = remainder)]
74 / 2 = 37 r0
37 / 2 = 18 r1
18 / 2 = 9 r0
9 / 2 = 4 r1
4 /2 = 2 r0
2 / 2 = 1 r0
1/ 2 = 0 r1

1001 0100 -> decimal

0110 (6 in decimal)
0111 (7 in decimal)
----
1101 (13 in decimal)

음수의 변환
-5

0000 0101
보수 complement 거꾸로 받는다.

1111 1010 // 1의 보수
1111 1011 // 2의 보수 -5

음수이면 맨 앞의 숫자는 sign을 의미한다.
0000 0000
1111 1111
음의 정수에 1을 하나 더하면
0000 0000
1이 더 앞으로 넘어간다.
+0 == -0이 2의 보수에서는 같아진다.
그렇기에 2의 보수를 쓴다.
*/

/*
1001 1110 // 음수이다.
0110 0001
0110 0010 -> 98 -> -98

// signed vs unsigned
1001 1110 -> 부호를 반영하고 안하고의 차이가 있기에 결과 다르다.

1001 1110 // singned일때
2^7*1 + 2^4*1 + 2^3*1 + 2^2*1 + 2^1*1 = 128+16+8+4+2

*/

int main()
{

	return (0);
}
